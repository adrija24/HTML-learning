---
import Layout from "@layouts/Layout.astro";
import "@assets/styles/level.css";
import levelData from "@assets/js/levelData";
export function getStaticPaths() {
    return levelData.map(({ level, speed }) => {
        return {
            params: { level },
            props: { speed },
        };
    });
}
const { level } = Astro.params;
const { speed } = Astro.props;
---

<Layout title="Homepage" description="Homepage Description">
    <div
        id="speedValue"
        class="divContainer w-screen h-screen flex flex-col justify-center items-center"
        data-speed={speed} data-level = {level}
    >
        <h4
            class="text-white text-3xl font-bold leading-loose underline decoration-double underline-offset-8"
        >
            Level {level}
        </h4>
        <div
            class="content gap-6 text-white text-left text-2xl tracking-widest w-3/5 p-2"
            id="text"
        >
            <p id="textDisplay"></p>
        </div>
        <div class="typingAndResult flex flex-col w-3/5 p-2">
            <div class="py-2 w-full">
                <textarea
                    type="text"
                    class="p-2 w-full h-48"
                    id="textInput"
                    disabled
                    autofocus></textarea>
            </div>
            <div class="result flex flex-col items-center">
                <div class="speed text-white">
                    <p class="text-xl">
                        <span id="score" class="text-white"></span>
                    </p>
                </div>
                <div id="showTimeContainer" class="hidden">
                    <p
                        id="showTime"
                        class="text-lg text-justify flex items-center justify-center text-red-600 border-solid bg-white rounded-full h-12 w-12 border-white"
                    >
                    </p>
                    <p id="timeDetails" class="text-xl text-white"></p>
                </div>
                <div class="accuracyTest">
                    <p id="accuracy" class="text-xl text-white"></p>
                </div>
            </div>
        </div>
        <div class="content w-2/5 py-2 flex justify-center">
            <button
            id="myButton"
            class="bg-blue-400 text-black font-semibold hover:text-white hover:py-1.5 hover:px-3.5 py-1 px-3 border border-black rounded focus-none"
            >
            Start
        </button>
        </div>
    </div>
    
    <script>
        const typing_ground = document.querySelector("#textInput");
        const btn = document.querySelector("#myButton");
        const score = document.querySelector("#score");
        const showTime = document.querySelector("#showTime");
        const timeDetails = document.querySelector("#timeDetails");
        const textDisplay = document.getElementById("textDisplay");
        const accuracyText = document.querySelector("#accuracy");
        const showTimeContainer = document.querySelector("#showTimeContainer");
        
        let startTime, endTime, totalTimeTaken, button, textDisplayLength;
        let accuracyCount = 0;
        let typing_speed = 0;
        let totalAccuracy = 0;
        let totalAccuracyCount = 0;

        //Speed Test & Show Timer function
        let intervalID,
            elpasedTime = 0;
        const showTimer = () => {
            showTimeContainer.style.display = "block";
            if (btn.innerHTML === "Done") {
                intervalID = setInterval(() => {
                    elpasedTime++;
                    showTime.innerHTML = elpasedTime;
                }, 1000);
            } else if (btn.innerHTML === "Start") {
                clearInterval(intervalID);
                document.getElementById("showTime").style.display = "none";
                let timeInMin = Math.round(elpasedTime / 60);
                let timeInSec = elpasedTime % 60;

                if (elpasedTime <= 59) {
                    timeDetails.innerHTML = `Total time is ${elpasedTime} sec`;
                } else {
                    timeDetails.innerHTML = `Total time is ${timeInMin} min ${timeInSec} sec`;
                }
            }
        };
        //calculateTypingSpeed function
        const calculateTypingSpeed = (time_taken) => {
            let totalWords = typing_ground.value.trim();
            let actualWords = totalWords === "" ? 0 : totalWords.split(" ").length;
            if (actualWords !== 0) {
                typing_speed = (actualWords / time_taken) * 60;
                typing_speed = Math.round(typing_speed);
                score.innerHTML = `Speed(WPM): ${typing_speed}`;
                let lengthCount = textDisplay.innerText.length;
                let accuracyResult = Math.round((accuracyCount / lengthCount) * 100);
                totalAccuracy = accuracyResult
                accuracyText.innerHTML = `Accuracy: ${accuracyResult} %`;
            } else {
                score.innerHTML = `0`;
            }
        };
        
        //startTyping function
        const startTyping = () => {
            let date = new Date();
            startTime = date.getTime();
            btn.innerHTML = "Done";
            showTimer();
            
            //checking correct & incorrect with the input characters
            typing_ground.addEventListener("input", () => {
                const arrayQuote = textDisplay.querySelectorAll("span");
                const arrayValue = typing_ground.value.split("");
                accuracyCount = 0;
                arrayQuote.forEach((characterSpan, index) => {
                    const character = arrayValue[index];
                    if (character == null) {
                        characterSpan.classList.remove("correct");
                        characterSpan.classList.remove("incorrect");
                    } else if (character === characterSpan.innerText) {
                        characterSpan.classList.add("correct");
                        characterSpan.classList.remove("incorrect");
                        accuracyCount++;
                    } else {
                        characterSpan.classList.remove("correct");
                        characterSpan.classList.add("incorrect");
                    }
                });
                //checking the length of the typing_ground & textDisplay to disable the typing ground
                if (arrayValue.length === textDisplay.innerText.length) {
                    typing_ground.setAttribute("disabled", "true");
                    btn.classList.remove(
                        "hover:text-white",
                        "hover:py-1.5",
                        "hover:px-3.5"
                        );
                    btn.style.cssText = "background: #BDDAFF;";
                    endTypingTest();
                }
            });
        };

        //endTypingTeset
        const endTypingTest = () => {
            btn.innerHTML = "Start";
            showTimer();
            if (typing_ground.length == textDisplay.length) {
                typing_ground.setAttribute("disabled", "true");
            }
            
            let date = new Date();
            endTime = date.getTime();
            totalTimeTaken = (endTime - startTime) / 1000;
            calculateTypingSpeed(totalTimeTaken);
            typing_ground.value = "";
            const speed = document.querySelector("#speedValue").dataset.speed;
            const level = document.querySelector("#speedValue").dataset.level;
            console.log(level);

            totalAccuracy = accuracyText.innerHTML.split(" ")
            totalAccuracyCount = Number(totalAccuracy[1])
            if (typing_speed >= speed && totalAccuracyCount >= 95 ) {
                btn.innerText = "Next level";
                var mydiv = document.getElementById("speedValue");
                var aTag = document.createElement("a");
                aTag.setAttribute("href", `/level/${Number(level)+(Number(1))}`);
                mydiv.appendChild(aTag);
                aTag.appendChild(btn);
            }
        };
        
        //cheking the innerText of button
        btn.addEventListener("click", () => {
            switch (btn.innerText.toLowerCase()) {
                case "start":
                    typing_ground.removeAttribute("disabled");
                    startTyping();
                    break;
                case "done":
                    typing_ground.setAttribute("disabled", "true");
                    endTypingTest();
                    break;
                }
            });
            
            // enabling start typing using 'Spacebar'
            var hasExecuted = false;
            document.body.onkeyup = function (e) {
                if (
                    (e.key === " " || e.code === "Space" || e.keyCode === 32) &&
                    !hasExecuted
                    ) {
                        typing_ground.removeAttribute("disabled");
                        typing_ground.focus();
                        startTyping();
                        hasExecuted = true;
                    }
                };
                
                //Paragraph fetch
                window.addEventListener("load", (event) => {
                    const numberOfSentences = 1; // Specify the number of sentences you want
                    
                    const xhr = new XMLHttpRequest();
                    xhr.open(
                        "GET",
                        `http://metaphorpsum.com/sentences/${numberOfSentences}`,
                        true
                        );
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4 && xhr.status === 200) {
                                const response = xhr.responseText;
                                textDisplay.innerHTML = "";
                                // Taking character from the actual quote To check correct & incorrect words
                                response.split("").forEach((character) => {
                                    const characterSpan = document.createElement("span");
                                    characterSpan.innerText = character;
                                    characterSpan.style.cssText = `
                                    margin: 1px;
                                    `;
                                    textDisplay.appendChild(characterSpan);
                                });
                            }
                        };
                        xhr.send();
                    });
                    
                    </script>
</Layout>
